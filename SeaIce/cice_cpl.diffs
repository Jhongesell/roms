diff --git a/bld/Macros.Linux.ARSC.pacman b/bld/Macros.Linux.ARSC.pacman
new file mode 100644
index 0000000..6732c44
--- /dev/null
+++ b/bld/Macros.Linux.ARSC.pacman
@@ -0,0 +1,81 @@
+#==============================================================================
+# Makefile macros for "pacman," a Linux cluster at ARSC
+#==============================================================================
+
+INCLDIR    := -I. -I/usr/include
+SLIBS      := -L/usr/lib
+ULIBS      :=
+CPP        := /usr/bin/cpp
+CPPFLAGS   := -P -traditional
+CPPDEFS    := -DLINUX
+CFLAGS     := -c -O2 -fastsse -tp k8-64
+ifeq ($(COMMDIR), mpi)
+   FC         := mpif90
+else
+   FC         := pgi
+endif
+# PGI
+FFLAGS     := -tp k8-64 -w -Kieee -Mbyteswapio -i4 -r8 -O2
+#FFLAGS     := -tp k8-64 -w -Kieee -Mbyteswapio -i4 -r8 -g -O0 -C
+FIXEDFLAGS := -132
+FREEFLAGS  := -Mfree
+# gfortran
+#FFLAGS   := -fdefault-real-8 -g -O0 -fbounds-check -fdefault-double-8
+#FREEFLAGS  := -ffree-form
+#FIXEDFLAGS := -ffixed-line-length-132
+#
+#FFLAGS     := -r8 -i4 -O2 -align all -w -ftz -convert big_endian -assume byterecl -fp-model precise
+#FFLAGS     := -r8 -i4  -align all -w -ftz -convert big_endian -assume byterecl -fp-model precise -g
+#FFLAGS     := -r8 -i4 -align all -w -ftz -convert big_endian -assume byterecl -fpe0 -CB -traceback
+#FFLAGS     := -r8 -i4 -align all -w -ftz -convert big_endian -assume byterecl -fpe0 -CB -g
+
+ifeq ($(THRD), yes)
+   FFLAGS  :=  $(FFLAGS) -openmp
+#cesm   CPPDEFS :=  $(CPPDEFS) -DTHREADED_OMP
+endif
+
+MOD_SUFFIX := mod
+LD         := $(FC)
+LDFLAGS    := $(FFLAGS) -v
+
+    CPPDEFS :=  $(CPPDEFS) -DNXGLOB=$(NXGLOB) -DNYGLOB=$(NYGLOB) \
+                -DBLCKX=$(BLCKX) -DBLCKY=$(BLCKY) -DMXBLCKS=$(MXBLCKS) \
+                -DNICELYR=$(NICELYR) -DNSNWLYR=$(NSNWLYR) -DNICECAT=$(NICECAT) \
+                -DTRAGE=$(TRAGE) -DTRFY=$(TRFY) -DTRLVL=$(TRLVL) -DTRPND=$(TRPND) \
+                -DTRBRI=$(TRBRI) -DNTRAERO=$(NTRAERO) -DNBGCLYR=$(NBGCLYR) \
+                -DTRBGCS=$(TRBGCS) -DNUMIN=$(NUMIN) -DNUMAX=$(NUMAX)
+#   CPPDEFS :=  $(CPPDEFS) -DAOMIP
+
+ifeq ($(CICE_IN_ROMS), yes)
+    CPPDEFS :=  $(CPPDEFS) -DCICE_IN_ROMS -Dcoupled
+endif
+
+ifeq ($(DITTO), yes)
+   CPPDEFS :=  $(CPPDEFS) -DREPRODUCIBLE
+endif
+ifeq ($(BARRIERS), yes)
+   CPPDEFS :=  $(CPPDEFS) -Dgather_scatter_barrier
+endif
+
+ifeq ($(IO_TYPE), netcdf)
+   CPPDEFS :=  $(CPPDEFS) -Dncdf
+#   INCLDIR := $(INCLDIR) $(NETCDF)/include
+#   SLIBS   := $(SLIBS) $(NETCDF)/lib -lnetcdf
+ NC_CONFIG ?= nc-config
+   INCLDIR := $(INCLDIR) -I$(shell $(NC_CONFIG) --prefix)/include
+   SLIBS   := $(SLIBS) $(shell $(NC_CONFIG) --flibs)
+endif
+
+### if using parallel I/O, load all 3 libraries.  PIO must be first!
+ifeq ($(IO_TYPE), pio)
+   INCLDIR := $(INCLDIR) -I/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/pio-1.4.0
+   SLIBS   := $(SLIBS) -L/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/pio-1.4.0 -lpio
+
+   INCLDIR := $(INCLDIR) -I/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/parallel-netcdf-1.2.0/include
+   SLIBS   := $(SLIBS) -L/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/parallel-netcdf-1.2.0/lib -lpnetcdf
+
+   CPPDEFS :=  $(CPPDEFS) -Dncdf
+   INCLDIR := $(INCLDIR) -I/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/netcdf-3.6.3/include
+   SLIBS   := $(SLIBS) -L/usr/projects/climate/SHARED_CLIMATE/software/conejo/intel_openmpi/netcdf-3.6.3/lib -lnetcdf
+
+endif
diff --git a/bld/Makefile b/bld/Makefile
index c2d232f..47eace0 100644
--- a/bld/Makefile
+++ b/bld/Makefile
@@ -31,6 +31,7 @@
 #-------------------------------------------------------------------------------
 
 EXEC     := a.out
+ROMSLIB  := libCICE.a
 MACFILE  := NONE 
 MODEL    := NONE 
 VPFILE   := NONE
@@ -66,10 +67,11 @@ DEPS  := $(addsuffix .d, $(sort $(basename $(notdir $(SRCS)))))
 INCS  := $(patsubst %,-I%, $(VPATH) )
 RM    := rm
 
-.SUFFIXES:
-.SUFFIXES: .F90 .F .c .o
+#.SUFFIXES:
+#.SUFFIXES: .F90 .F .c .o
 
-all: $(EXEC)
+#all: $(EXEC)
+all: $(ROMSLIB)
 
 #-------------------------------------------------------------------------------
 # include the file that provides macro definitions required by build rules
@@ -107,16 +109,19 @@ db_flags:
 #-------------------------------------------------------------------------------
 
 $(EXEC): $(OBJS)
-	$(LD) -o $(EXEC) $(LDFLAGS) $(OBJS) $(ULIBS) $(SLIBS)
+	$(LD) -o $@ $(LDFLAGS) $(OBJS) $(ULIBS) $(SLIBS)
 
-.c.o:
+$(ROMSLIB): $(OBJS)
+	ar -r $@ $(OBJS)
+
+%.o: %.c
 	cc $(CFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $<
 
-.F.o:
+%.o: %.F
 	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $< > $*.f 
 	$(FC) -c $(FFLAGS) $(FIXEDFLAGS) $(INCS) $(INCLDIR) $*.f  
 
-.F90.o:
+%.o: %.F90
 	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $< > $*.f90
 	$(FC) -c $(FFLAGS) $(FREEFLAGS) $(INCS) $(INCLDIR) $*.f90  
 
diff --git a/bld/Makefile.romslib b/bld/Makefile.romslib
new file mode 100644
index 0000000..38e2f3f
--- /dev/null
+++ b/bld/Makefile.romslib
@@ -0,0 +1,174 @@
+#-------------------------------------------------------------------------------
+# CVS $Id: Makefile.std,v 1.1 2004/02/09 18:13:52 lipscomb Exp $
+# CVS $Source: /home/climate/CVS-COSIM/cice/bld/Makefile.std,v $
+# CVS $Name:  $
+#-------------------------------------------------------------------------------
+# Common Makefile: a framework for building all CCSM components and more
+#
+# Command-line variables
+#   MACFILE=<file> ~ the macros definition file to use/include
+#   EXEC=<name>    ~ name given to executable, default is a.out
+#   VPATH=<vpath>  ~ VPATH            , default is . (cwd only)
+#   SRCS=<files>   ~ list of src files, default is all .c .F .F90 files in VPATH
+#   VPFILE=<file>  ~ file with list of dirs, used to create VPATH
+#   SRCFILE=<file> ~ file with list of src files, used to create SRCS
+#   DEPGEN=<exec>  ~ dependency generator utility, default is makdep
+#
+#   <macro defns>  ~ any macro definitions found in this file or the included
+#                    MACFILE will be over-riden by cmd-line macro definitions
+#   MODEL=<model>  ~ a standard macro definition, often found in the included
+#                    MACFILE, used to trigger special compilation flags
+#
+# Usage examples:
+#   % gmake MACFILE=Macros.AIX VPFILE=Filepath MODEL=ccm3 EXEC=atm
+#   % gmake MACFILE=Macros.AIX VPFILE=Filepath SRCFILE=Srclist EXEC=pop
+#   % gmake MACFILE=Macros.C90 VPATH="dir1 dir2" SRCS="file1.c file2.F90"
+#   % gmake MACFILE=Macros.SUN SRCS="test.F"
+#-------------------------------------------------------------------------------
+
+#-------------------------------------------------------------------------------
+# parse cmd-line and establish values for EXEC, VPATH, SRCS, OBJS, etc
+#-------------------------------------------------------------------------------
+
+EXEC     := a.out
+ROMSLIB  := libCICE.a
+MACFILE  := NONE
+MODEL    := NONE
+VPFILE   := NONE
+VPATH    := .
+SRCFILE  := NONE
+SRCS     := NONE
+DEPGEN   := ./makdep  # an externally provided dependency generator
+
+ifneq ($(VPATH),.)
+  # this variable was specified on cmd line or in an env var
+else
+  ifneq ($(VPFILE),NONE)
+    # explicit list of VPATH dirs is provided
+    VPATH := $(wildcard . $(shell cat $(VPFILE) ) )
+  endif
+endif
+
+ifneq ($(SRCS),NONE)
+  # this variable was specified on cmd line or in an env var
+else
+  ifneq ($(SRCFILE),NONE)
+    # explicit list of src files is provided
+    SRCS := $(shell cat $(SRCFILE) )
+  else
+    # list of src files is all .F90 .F .c files in VPATH
+    SRCS := $(wildcard $(addsuffix /*.F90 , $(VPATH)) \
+		       $(addsuffix /*.[cF], $(VPATH)) )
+  endif
+endif
+
+OBJS  := $(addsuffix .o, $(sort $(basename $(notdir $(SRCS)))))
+DEPS  := $(addsuffix .d, $(sort $(basename $(notdir $(SRCS)))))
+INCS  := $(patsubst %,-I%, $(VPATH) )
+RM    := rm
+
+#.SUFFIXES:
+#.SUFFIXES: .F90 .F .c .o
+
+#all: $(EXEC)
+all: $(ROMSLIB)
+
+#-------------------------------------------------------------------------------
+# include the file that provides macro definitions required by build rules
+# note: the MACFILE may not be needed for certain goals
+#-------------------------------------------------------------------------------
+
+ifneq ($(MAKECMDGOALS), db_files)
+  -include $(MACFILE)
+endif
+
+#-------------------------------------------------------------------------------
+# echo file names, paths, compile flags, etc. used during build
+#-------------------------------------------------------------------------------
+
+db_files:
+	@echo " "
+	@echo "* EXEC    := $(EXEC)"
+	@echo "* MACFILE := $(MACFILE)"
+	@echo "* VPFILE  := $(VPFILE)"
+	@echo "* VPATH   := $(VPATH)"
+	@echo "* SRCFILE := $(SRCFILE)"
+	@echo "* INCS    := $(INCS)"
+	@echo "* SRCS    := $(SRCS)"
+	@echo "* OBJS    := $(OBJS)"
+	@echo "* DEPS    := $(DEPS)"
+db_flags:
+	@echo " "
+	@echo "* cpp     := $(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR)"
+	@echo "* cc      := cc -c $(CFLAGS) $(INCS) $(INCLDIR)"
+	@echo "* .F.o    := $(FC) -c $(FFLAGS) $(FIXEDFLAGS) $(INCS) $(INCLDIR)"
+	@echo "* .F90.o  := $(FC) -c $(FFLAGS) $(FREEFLAGS) $(INCS) $(INCLDIR)"
+
+#-------------------------------------------------------------------------------
+# build rules: MACFILE, cmd-line, or env vars must provide the needed macros
+#-------------------------------------------------------------------------------
+
+$(EXEC): $(OBJS)
+	$(LD) -o $@ $(LDFLAGS) $(OBJS) $(ULIBS) $(SLIBS)
+
+$(ROMSLIB): $(OBJS)
+	ar -r $@ $(OBJS)
+
+%.o: %.c
+	cc $(CFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $<
+
+%.o: %.F
+	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $< > $*.f
+	$(FC) -c $(FFLAGS) $(FIXEDFLAGS) $(INCS) $(INCLDIR) $*.f
+
+%.o: %.F90
+	$(CPP) $(CPPFLAGS) $(CPPDEFS) $(INCS) $(INCLDIR) $< > $*.f90
+	$(FC) -c $(FFLAGS) $(FREEFLAGS) $(INCS) $(INCLDIR) $*.f90
+
+mostlyclean:
+	$(RM) -f *.f *.f90
+
+clean:
+	$(RM) -f *.f *.f90 *.d *.mod *.o
+#	$(RM) -f *.f *.f90 *.d *.$(MOD_SUFFIX) $(OBJS)
+
+realclean:
+	$(RM) -f *.f *.f90 *.d *.$(MOD_SUFFIX) $(OBJS) $(EXEC)
+
+#-------------------------------------------------------------------------------
+# Build & include dependency files
+#-------------------------------------------------------------------------------
+# ASSUMPTIONS:
+# o an externally provided dependency generator, $(DEPGEN), is available,
+#   its cmd line syntax is compatible with the build rules below.   Eg, for
+#   each .o file, there is a corresponding .d (dependency) file, and both
+#   will be dependent on the same src file, eg.    foo.o foo.d : foo.F90
+#   Also, the dependancy genorator's capabilities, limitations, and assumptions
+#   are understood & accepted.
+#-------------------------------------------------------------------------------
+
+%.d : %.c
+	@ echo "Building dependency for $@"
+	@ $(DEPGEN) -f $(INCS) $< | head -3  > $@
+%.d : %.F
+	@ echo "Building dependency for $@"
+	@ $(DEPGEN) -f $(INCS) $<  > $@
+%.d : %.F90
+	@ echo "Building dependency for $@"
+	@ $(DEPGEN) -f $(INCS) $<  > $@
+%.d : %.H
+	@ echo "Building dependency for $@"
+	@ $(DEPGEN) -f $(INCS) $<  > $@
+
+# the if-tests prevent DEPS files from being created when they're not needed
+ifneq ($(MAKECMDGOALS), db_files)
+ifneq ($(MAKECMDGOALS), db_flags)
+ifneq ($(MAKECMDGOALS), mostlyclean)
+ifneq ($(MAKECMDGOALS), clean)
+ifneq ($(MAKECMDGOALS), realclean)
+    -include $(DEPS)
+endif
+endif
+endif
+endif
+endif
diff --git a/input_templates/arctic/ice.restart_file b/input_templates/arctic/ice.restart_file
new file mode 100644
index 0000000..17b1dce
--- /dev/null
+++ b/input_templates/arctic/ice.restart_file
@@ -0,0 +1 @@
+./restart/iced_arctic_v5.nc
diff --git a/input_templates/arctic/ice_in b/input_templates/arctic/ice_in
new file mode 100644
index 0000000..645dabb
--- /dev/null
+++ b/input_templates/arctic/ice_in
@@ -0,0 +1,360 @@
+&setup_nml
+    days_per_year  = 365
+  , use_leap_years = .true.
+  , year_init      = 1990
+  , istep0         = 0
+  , dt             = 120.0
+  , npt            = 7200
+  , ndtd           = 1
+  , runtype        = 'initial'
+  , ice_ic         = 'default'
+  , restart        = .false.
+  , restart_ext    = .false.
+  , use_restart_time = .true.
+  , restart_format = 'nc'
+  , lcdf64         = .false.
+  , restart_dir    = './restart/'
+  , restart_file   = 'iced'
+  , pointer_file   = './restart/ice.restart_file'
+  , dumpfreq       = 'y'
+  , dumpfreq_n     = 1
+  , dump_last      = .false.
+  , diagfreq       = 30
+  , diag_type      = 'file'
+  , diag_file      = 'ice_diag.out'
+  , print_global   = .false.
+  , print_points   = .false.
+  , latpnt(1)      =  90.
+  , lonpnt(1)      =   0.
+  , latpnt(2)      = 65.8
+  , lonpnt(2)      = 191.
+  , dbug           = .false.
+  , histfreq       = 'd','m','x','x','x'
+  , histfreq_n     =  1 , 1 , 1 , 1 , 1
+  , hist_avg       = .true.
+  , history_dir    = './history/'
+  , history_file   = 'iceh'
+  , write_ic       = .true.
+  , incond_dir     = './history/'
+  , incond_file    = 'iceh_ic'
+/
+
+&grid_nml
+    grid_format  = 'nc'
+  , grid_type    = 'roms_grid'
+  , grid_file    = 'popgrid_Arctic_2.nc'
+  , kmt_file     = 'popgrid_Arctic_2.nc'
+  , kcatbound    = 0
+/
+
+&domain_nml
+    nprocs = 128
+  , processor_shape   = 'square-pop'
+  , distribution_type = 'cartesian'
+  , distribution_wght = 'latitude'
+  , ew_boundary_type  = 'open'
+  , ns_boundary_type  = 'open'
+  , maskhalo_dyn      = .false.
+  , maskhalo_remap    = .false.
+  , maskhalo_bound    = .false.
+/
+
+&tracer_nml
+    tr_iage      = .true.
+  , restart_age  = .false.
+  , tr_FY        = .false.
+  , restart_FY   = .false.
+  , tr_lvl       = .true.
+  , restart_lvl  = .false.
+  , tr_pond_cesm = .true.
+  , restart_pond_cesm = .false.
+  , tr_pond_topo = .false.
+  , restart_pond_topo = .false.
+  , tr_pond_lvl  = .false.
+  , restart_pond_lvl  = .false.
+  , tr_aero      = .false.
+  , restart_aero = .false.
+/
+
+&thermo_nml
+    kitd              = 1
+  , ktherm            = 1
+  , conduct           = 'bubbly'
+  , a_rapid_mode      =  0.5e-3
+  , Rac_rapid_mode    =    10.0
+  , aspect_rapid_mode =     1.0
+  , dSdt_slow_mode    = -5.0e-8
+  , phi_c_slow_mode   =    0.05
+  , phi_i_mushy       =    0.85
+/
+
+&dynamics_nml
+    kdyn            = 1
+  , ndte            = 120
+  , revised_evp     = .false.
+  , advection       = 'remap'
+  , kstrength       = 1
+  , krdg_partic     = 1
+  , krdg_redist     = 1
+  , mu_rdg          = 3
+/
+
+&shortwave_nml
+    shortwave       = 'dEdd'
+  , albedo_type     = 'default'
+  , albicev         = 0.78
+  , albicei         = 0.36
+  , albsnowv        = 0.98
+  , albsnowi        = 0.70
+  , ahmax           = 0.3
+  , R_ice           = 0.
+  , R_pnd           = 0.
+  , R_snw           = 1.5
+  , dT_mlt          = 1.5
+  , rsnw_mlt        = 1500.
+/
+
+&ponds_nml
+    hp1             = 0.01
+  , hs0             = 0.03
+  , hs1             = 0.03
+  , dpscale         = 1.e-3
+  , frzpnd          = 'hlid'
+  , snowinfil       = .true.
+  , rfracmin        = 0.15
+  , rfracmax        = 1.
+  , pndaspect       = 0.8
+/
+
+&zbgc_nml
+    tr_brine        = .false.
+  , restart_hbrine  = .false.
+  , skl_bgc         = .false.
+  , bgc_flux_type   = 'Jin2006'
+  , restart_bgc     = .false.
+  , restore_bgc     = .false.
+  , bgc_data_dir    = 'unknown_bgc_data_dir'
+  , sil_data_type   = 'default'
+  , nit_data_type   = 'default'
+  , tr_bgc_C_sk     = .false.
+  , tr_bgc_chl_sk   = .false.
+  , tr_bgc_Am_sk    = .false.
+  , tr_bgc_Sil_sk   = .false.
+  , tr_bgc_DMSPp_sk = .false.
+  , tr_bgc_DMSPd_sk = .false.
+  , tr_bgc_DMS_sk   = .false.
+  , phi_snow        = 0.5
+/
+
+&forcing_nml
+    formdrag        = .false.
+  , atmbndy         = 'default'
+  , fyear_init      = 1990
+  , ycycle          = 1
+  , atm_data_format = 'bin'
+  , atm_data_type   = 'ncar'
+  , atm_data_dir    = '/usr/projects/climate/eclare/DATA/atm/gx3v2m/NCAR_bulk/'
+  , calc_strair     = .true.
+  , calc_Tsfc       = .true.
+  , precip_units    = 'mks'
+  , ustar_min       = 0.0005
+  , update_ocn_f    = .false.
+  , oceanmixed_ice  = .false.
+  , ocn_data_format = 'bin'
+  , sss_data_type   = 'default'
+  , sst_data_type   = 'default'
+  , ocn_data_dir    = 'unknown_ocn_data_dir'
+  , oceanmixed_file = 'unknown_oceanmixed_file'
+  , restore_sst     = .false.
+  , trestore        =  90
+  , restore_ice     = .false.
+/
+
+&icefields_nml
+    f_tmask        = .true.
+  , f_tarea        = .true.
+  , f_uarea        = .true.
+  , f_dxt          = .false.
+  , f_dyt          = .false.
+  , f_dxu          = .false.
+  , f_dyu          = .false.
+  , f_HTN          = .false.
+  , f_HTE          = .false.
+  , f_ANGLE        = .true.
+  , f_ANGLET       = .true.
+  , f_NCAT         = .true.
+  , f_VGRDi        = .false.
+  , f_VGRDs        = .false.
+  , f_VGRDb        = .false.
+  , f_bounds       = .false.
+  , f_aice         = 'd'
+  , f_hi           = 'd'
+  , f_hs           = 'd'
+  , f_Tsfc         = 'm'
+  , f_sice         = 'm'
+  , f_uvel         = 'd'
+  , f_vvel         = 'd'
+  , f_fswdn        = 'm'
+  , f_flwdn        = 'm'
+  , f_snow         = 'x'
+  , f_snow_ai      = 'm'
+  , f_rain         = 'x'
+  , f_rain_ai      = 'm'
+  , f_sst          = 'm'
+  , f_sss          = 'm'
+  , f_uocn         = 'm'
+  , f_vocn         = 'm'
+  , f_frzmlt       = 'm'
+  , f_fswfac       = 'm'
+  , f_fswabs       = 'x'
+  , f_fswabs_ai    = 'm'
+  , f_albsni       = 'm'
+  , f_alvdr        = 'x'
+  , f_alidr        = 'x'
+  , f_albice       = 'x'
+  , f_albsno       = 'x'
+  , f_albpnd       = 'x'
+  , f_coszen       = 'x'
+  , f_flat         = 'x'
+  , f_flat_ai      = 'm'
+  , f_fsens        = 'x'
+  , f_fsens_ai     = 'm'
+  , f_flwup        = 'x'
+  , f_flwup_ai     = 'm'
+  , f_evap         = 'x'
+  , f_evap_ai      = 'm'
+  , f_Tair         = 'm'
+  , f_Tref         = 'x'
+  , f_Qref         = 'x'
+  , f_congel       = 'm'
+  , f_frazil       = 'm'
+  , f_snoice       = 'm'
+  , f_dsnow        = 'x'
+  , f_melts        = 'm'
+  , f_meltt        = 'm'
+  , f_meltb        = 'm'
+  , f_meltl        = 'm'
+  , f_fresh        = 'x'
+  , f_fresh_ai     = 'm'
+  , f_fsalt        = 'x'
+  , f_fsalt_ai     = 'm'
+  , f_fhocn        = 'x'
+  , f_fhocn_ai     = 'm'
+  , f_fswthru      = 'x'
+  , f_fswthru_ai   = 'm'
+  , f_fsurf_ai     = 'x'
+  , f_fcondtop_ai  = 'x'
+  , f_fmeltt_ai    = 'x'
+  , f_strairx      = 'm'
+  , f_strairy      = 'm'
+  , f_strtltx      = 'x'
+  , f_strtlty      = 'x'
+  , f_strcorx      = 'x'
+  , f_strcory      = 'x'
+  , f_strocnx      = 'x'
+  , f_strocny      = 'x'
+  , f_strintx      = 'x'
+  , f_strinty      = 'x'
+  , f_strength     = 'm'
+  , f_divu         = 'm'
+  , f_shear        = 'm'
+  , f_sig1         = 'm'
+  , f_sig2         = 'm'
+  , f_dvidtt       = 'm'
+  , f_dvidtd       = 'm'
+  , f_daidtt       = 'm'
+  , f_daidtd       = 'm'
+  , f_mlt_onset    = 'm'
+  , f_frz_onset    = 'm'
+  , f_hisnap       = 'x'
+  , f_aisnap       = 'x'
+  , f_trsig        = 'm'
+  , f_icepresent   = 'm'
+  , f_iage         = 'm'
+  , f_FY           = 'x'
+  , f_aicen        = 'x'
+  , f_vicen        = 'x'
+  , f_Tinz         = 'x'
+  , f_Sinz         = 'x'
+  , f_Tsnz         = 'x'
+  , f_fsurfn_ai    = 'x'
+  , f_fcondtopn_ai = 'x'
+  , f_fmelttn_ai   = 'x'
+  , f_flatn_ai     = 'x'
+/
+
+&icefields_mechred_nml
+    f_alvl         = 'm'
+  , f_vlvl         = 'm'
+  , f_ardg         = 'm'
+  , f_vrdg         = 'm'
+  , f_dardg1dt     = 'x'
+  , f_dardg2dt     = 'x'
+  , f_dvirdgdt     = 'x'
+  , f_opening      = 'x'
+  , f_ardgn        = 'x'
+  , f_vrdgn        = 'x'
+  , f_dardg1ndt    = 'x'
+  , f_dardg2ndt    = 'x'
+  , f_dvirdgndt    = 'x'
+  , f_krdgn        = 'x'
+  , f_aparticn     = 'x'
+  , f_aredistn     = 'x'
+  , f_vredistn     = 'x'
+  , f_araftn       = 'x'
+  , f_vraftn       = 'x'
+/
+
+&icefields_pond_nml
+    f_apondn       = 'x'
+  , f_apeffn       = 'x'
+  , f_hpondn       = 'x'
+  , f_apond        = 'm'
+  , f_hpond        = 'm'
+  , f_ipond        = 'm'
+  , f_apeff        = 'm'
+  , f_apond_ai     = 'm'
+  , f_hpond_ai     = 'm'
+  , f_ipond_ai     = 'm'
+  , f_apeff_ai     = 'm'
+/
+
+&icefields_bgc_nml
+    f_faero_atm    = 'x'
+  , f_faero_ocn    = 'x'
+  , f_aero         = 'x'
+  , f_fNO          = 'x'
+  , f_fNO_ai       = 'x'
+  , f_fNH          = 'x'
+  , f_fNH_ai       = 'x'
+  , f_fN           = 'x'
+  , f_fN_ai        = 'x'
+  , f_fSil         = 'x'
+  , f_fSil_ai      = 'x'
+  , f_bgc_N_sk     = 'x'
+  , f_bgc_C_sk     = 'x'
+  , f_bgc_chl_sk   = 'x'
+  , f_bgc_Nit_sk   = 'x'
+  , f_bgc_Am_sk    = 'x'
+  , f_bgc_Sil_sk   = 'x'
+  , f_bgc_DMSPp_sk = 'x'
+  , f_bgc_DMSPd_sk = 'x'
+  , f_bgc_DMS_sk   = 'x'
+  , f_bgc_Nit_ml   = 'x'
+  , f_bgc_Am_ml    = 'x'
+  , f_bgc_Sil_ml   = 'x'
+  , f_bgc_DMSP_ml  = 'x'
+  , f_bTin         = 'x'
+  , f_bphi         = 'x'
+  , f_fbri         = 'm'
+  , f_hbri         = 'm'
+  , f_grownet      = 'x'
+  , f_PPnet        = 'x'
+/
+
+&icefields_drag_nml
+    f_drag         = 'x'
+  , f_Cdn_atm      = 'x'
+  , f_Cdn_ocn      = 'x'
+/
+
diff --git a/input_templates/bering/ice.restart_file b/input_templates/bering/ice.restart_file
new file mode 100644
index 0000000..d20f6d6
--- /dev/null
+++ b/input_templates/bering/ice.restart_file
@@ -0,0 +1 @@
+./restart/iced_bering_v5.nc
diff --git a/input_templates/bering/ice_in b/input_templates/bering/ice_in
new file mode 100644
index 0000000..79514b4
--- /dev/null
+++ b/input_templates/bering/ice_in
@@ -0,0 +1,360 @@
+&setup_nml
+    days_per_year  = 365
+  , use_leap_years = .true.
+  , year_init      = 2011
+  , istep0         = 110592
+  , dt             = 200.0
+  , npt            = 43200
+  , ndtd           = 1
+  , runtype        = 'initial'
+  , ice_ic         = 'default'
+  , restart        = .false.
+  , restart_ext    = .false.
+  , use_restart_time = .true.
+  , restart_format = 'nc'
+  , lcdf64         = .false.
+  , restart_dir    = './restart/'
+  , restart_file   = 'iced'
+  , pointer_file   = './restart/ice.restart_file'
+  , dumpfreq       = 'd'
+  , dumpfreq_n     = 1
+  , dump_last      = .true.
+  , diagfreq       = 30
+  , diag_type      = 'file'
+  , diag_file      = 'ice_diag.out'
+  , print_global   = .false.
+  , print_points   = .false.
+  , latpnt(1)      =  70.
+  , lonpnt(1)      = 191.
+  , latpnt(2)      = 65.8
+  , lonpnt(2)      = 191.
+  , dbug           = .false.
+  , histfreq       = 'd','m','x','x','x'
+  , histfreq_n     =  1 , 1 , 1 , 1 , 1
+  , hist_avg       = .true.
+  , history_dir    = './history/'
+  , history_file   = 'iceh'
+  , write_ic       = .false.
+  , incond_dir     = './history/'
+  , incond_file    = 'iceh_ic'
+/
+
+&grid_nml
+    grid_format  = 'nc'
+  , grid_type    = 'roms_grid'
+  , grid_file    = '../Bering/Files/popgrid_Bering.nc'
+  , kmt_file     = '../Bering/Files/popgrid_Bering.nc'
+  , kcatbound    = 0
+/
+
+&domain_nml
+    nprocs = 64
+  , processor_shape   = 'square-pop'
+  , distribution_type = 'cartesian'
+  , distribution_wght = 'latitude'
+  , ew_boundary_type  = 'open'
+  , ns_boundary_type  = 'open'
+  , maskhalo_dyn      = .false.
+  , maskhalo_remap    = .false.
+  , maskhalo_bound    = .false.
+/
+
+&tracer_nml
+    tr_iage      = .true.
+  , restart_age  = .false.
+  , tr_FY        = .false.
+  , restart_FY   = .false.
+  , tr_lvl       = .true.
+  , restart_lvl  = .false.
+  , tr_pond_cesm = .false.
+  , restart_pond_cesm = .false.
+  , tr_pond_topo = .false.
+  , restart_pond_topo = .false.
+  , tr_pond_lvl  = .true.
+  , restart_pond_lvl  = .false.
+  , tr_aero      = .false.
+  , restart_aero = .false.
+/
+
+&thermo_nml
+    kitd              = 1
+  , ktherm            = 1
+  , conduct           = 'bubbly'
+  , a_rapid_mode      =  0.5e-3
+  , Rac_rapid_mode    =    10.0
+  , aspect_rapid_mode =     1.0
+  , dSdt_slow_mode    = -5.0e-8
+  , phi_c_slow_mode   =    0.05
+  , phi_i_mushy       =    0.85
+/
+
+&dynamics_nml
+    kdyn            = 1
+  , ndte            = 120
+  , revised_evp     = .false.
+  , advection       = 'remap'
+  , kstrength       = 1
+  , krdg_partic     = 1
+  , krdg_redist     = 1
+  , mu_rdg          = 3
+/
+
+&shortwave_nml
+    shortwave       = 'dEdd'
+  , albedo_type     = 'default'
+  , albicev         = 0.78
+  , albicei         = 0.36
+  , albsnowv        = 0.98
+  , albsnowi        = 0.70
+  , ahmax           = 0.3
+  , R_ice           = 0.
+  , R_pnd           = 0.
+  , R_snw           = 1.5
+  , dT_mlt          = 1.5
+  , rsnw_mlt        = 1500.
+/
+
+&ponds_nml
+    hp1             = 0.01
+  , hs0             = 0.03
+  , hs1             = 0.03
+  , dpscale         = 1.e-3
+  , frzpnd          = 'hlid'
+  , snowinfil       = .true.
+  , rfracmin        = 0.15
+  , rfracmax        = 1.
+  , pndaspect       = 0.8
+/
+
+&zbgc_nml
+    tr_brine        = .false.
+  , restart_hbrine  = .false.
+  , skl_bgc         = .false.
+  , bgc_flux_type   = 'Jin2006'
+  , restart_bgc     = .false.
+  , restore_bgc     = .false.
+  , bgc_data_dir    = 'unknown_bgc_data_dir'
+  , sil_data_type   = 'default'
+  , nit_data_type   = 'default'
+  , tr_bgc_C_sk     = .false.
+  , tr_bgc_chl_sk   = .false.
+  , tr_bgc_Am_sk    = .false.
+  , tr_bgc_Sil_sk   = .false.
+  , tr_bgc_DMSPp_sk = .false.
+  , tr_bgc_DMSPd_sk = .false.
+  , tr_bgc_DMS_sk   = .false.
+  , phi_snow        = 0.5
+/
+
+&forcing_nml
+    formdrag        = .false.
+  , atmbndy         = 'default'
+  , fyear_init      = 1990
+  , ycycle          = 1
+  , atm_data_format = 'bin'
+  , atm_data_type   = 'ncar'
+  , atm_data_dir    = '/usr/projects/climate/eclare/DATA/atm/gx3v2m/NCAR_bulk/'
+  , calc_strair     = .true.
+  , calc_Tsfc       = .true.
+  , precip_units    = 'mks'
+  , ustar_min       = 0.0005
+  , update_ocn_f    = .false.
+  , oceanmixed_ice  = .false.
+  , ocn_data_format = 'bin'
+  , sss_data_type   = 'default'
+  , sst_data_type   = 'default'
+  , ocn_data_dir    = 'unknown_ocn_data_dir'
+  , oceanmixed_file = 'unknown_oceanmixed_file'
+  , restore_sst     = .false.
+  , trestore        =  90
+  , restore_ice     = .false.
+/
+
+&icefields_nml
+    f_tmask        = .true.
+  , f_tarea        = .true.
+  , f_uarea        = .true.
+  , f_dxt          = .false.
+  , f_dyt          = .false.
+  , f_dxu          = .false.
+  , f_dyu          = .false.
+  , f_HTN          = .false.
+  , f_HTE          = .false.
+  , f_ANGLE        = .true.
+  , f_ANGLET       = .true.
+  , f_NCAT         = .true.
+  , f_VGRDi        = .false.
+  , f_VGRDs        = .false.
+  , f_VGRDb        = .false.
+  , f_bounds       = .false.
+  , f_aice         = 'd'
+  , f_hi           = 'd'
+  , f_hs           = 'd'
+  , f_Tsfc         = 'd'
+  , f_sice         = 'd'
+  , f_uvel         = 'd'
+  , f_vvel         = 'd'
+  , f_fswdn        = 'm'
+  , f_flwdn        = 'm'
+  , f_snow         = 'x'
+  , f_snow_ai      = 'm'
+  , f_rain         = 'x'
+  , f_rain_ai      = 'm'
+  , f_sst          = 'x'
+  , f_sss          = 'x'
+  , f_uocn         = 'x'
+  , f_vocn         = 'x'
+  , f_frzmlt       = 'd'
+  , f_fswfac       = 'd'
+  , f_fswabs       = 'x'
+  , f_fswabs_ai    = 'm'
+  , f_albsni       = 'm'
+  , f_alvdr        = 'x'
+  , f_alidr        = 'x'
+  , f_albice       = 'x'
+  , f_albsno       = 'x'
+  , f_albpnd       = 'x'
+  , f_coszen       = 'x'
+  , f_flat         = 'x'
+  , f_flat_ai      = 'm'
+  , f_fsens        = 'x'
+  , f_fsens_ai     = 'm'
+  , f_flwup        = 'x'
+  , f_flwup_ai     = 'm'
+  , f_evap         = 'x'
+  , f_evap_ai      = 'm'
+  , f_Tair         = 'm'
+  , f_Tref         = 'x'
+  , f_Qref         = 'x'
+  , f_congel       = 'd'
+  , f_frazil       = 'd'
+  , f_snoice       = 'd'
+  , f_dsnow        = 'x'
+  , f_melts        = 'd'
+  , f_meltt        = 'd'
+  , f_meltb        = 'd'
+  , f_meltl        = 'd'
+  , f_fresh        = 'x'
+  , f_fresh_ai     = 'd'
+  , f_fsalt        = 'x'
+  , f_fsalt_ai     = 'd'
+  , f_fhocn        = 'x'
+  , f_fhocn_ai     = 'd'
+  , f_fswthru      = 'x'
+  , f_fswthru_ai   = 'm'
+  , f_fsurf_ai     = 'x'
+  , f_fcondtop_ai  = 'x'
+  , f_fmeltt_ai    = 'x'
+  , f_strairx      = 'm'
+  , f_strairy      = 'm'
+  , f_strtltx      = 'm'
+  , f_strtlty      = 'm'
+  , f_strcorx      = 'm'
+  , f_strcory      = 'm'
+  , f_strocnx      = 'm'
+  , f_strocny      = 'm'
+  , f_strintx      = 'm'
+  , f_strinty      = 'm'
+  , f_strength     = 'm'
+  , f_divu         = 'm'
+  , f_shear        = 'm'
+  , f_sig1         = 'm'
+  , f_sig2         = 'm'
+  , f_dvidtt       = 'm'
+  , f_dvidtd       = 'm'
+  , f_daidtt       = 'm'
+  , f_daidtd       = 'm'
+  , f_mlt_onset    = 'm'
+  , f_frz_onset    = 'm'
+  , f_hisnap       = 'x'
+  , f_aisnap       = 'x'
+  , f_trsig        = 'm'
+  , f_icepresent   = 'm'
+  , f_iage         = 'm'
+  , f_FY           = 'x'
+  , f_aicen        = 'x'
+  , f_vicen        = 'x'
+  , f_Tinz         = 'x'
+  , f_Sinz         = 'x'
+  , f_Tsnz         = 'x'
+  , f_fsurfn_ai    = 'x'
+  , f_fcondtopn_ai = 'x'
+  , f_fmelttn_ai   = 'x'
+  , f_flatn_ai     = 'x'
+/
+
+&icefields_mechred_nml
+    f_alvl         = 'm'
+  , f_vlvl         = 'm'
+  , f_ardg         = 'm'
+  , f_vrdg         = 'm'
+  , f_dardg1dt     = 'x'
+  , f_dardg2dt     = 'x'
+  , f_dvirdgdt     = 'x'
+  , f_opening      = 'x'
+  , f_ardgn        = 'x'
+  , f_vrdgn        = 'x'
+  , f_dardg1ndt    = 'x'
+  , f_dardg2ndt    = 'x'
+  , f_dvirdgndt    = 'x'
+  , f_krdgn        = 'x'
+  , f_aparticn     = 'x'
+  , f_aredistn     = 'x'
+  , f_vredistn     = 'x'
+  , f_araftn       = 'x'
+  , f_vraftn       = 'x'
+/
+
+&icefields_pond_nml
+    f_apondn       = 'x'
+  , f_apeffn       = 'x'
+  , f_hpondn       = 'x'
+  , f_apond        = 'd'
+  , f_hpond        = 'd'
+  , f_ipond        = 'm'
+  , f_apeff        = 'm'
+  , f_apond_ai     = 'm'
+  , f_hpond_ai     = 'm'
+  , f_ipond_ai     = 'm'
+  , f_apeff_ai     = 'm'
+/
+
+&icefields_bgc_nml
+    f_faero_atm    = 'x'
+  , f_faero_ocn    = 'x'
+  , f_aero         = 'x'
+  , f_fNO          = 'x'
+  , f_fNO_ai       = 'x'
+  , f_fNH          = 'x'
+  , f_fNH_ai       = 'x'
+  , f_fN           = 'x'
+  , f_fN_ai        = 'x'
+  , f_fSil         = 'x'
+  , f_fSil_ai      = 'x'
+  , f_bgc_N_sk     = 'x'
+  , f_bgc_C_sk     = 'x'
+  , f_bgc_chl_sk   = 'x'
+  , f_bgc_Nit_sk   = 'x'
+  , f_bgc_Am_sk    = 'x'
+  , f_bgc_Sil_sk   = 'x'
+  , f_bgc_DMSPp_sk = 'x'
+  , f_bgc_DMSPd_sk = 'x'
+  , f_bgc_DMS_sk   = 'x'
+  , f_bgc_Nit_ml   = 'x'
+  , f_bgc_Am_ml    = 'x'
+  , f_bgc_Sil_ml   = 'x'
+  , f_bgc_DMSP_ml  = 'x'
+  , f_bTin         = 'x'
+  , f_bphi         = 'x'
+  , f_fbri         = 'm'
+  , f_hbri         = 'm'
+  , f_grownet      = 'x'
+  , f_PPnet        = 'x'
+/
+
+&icefields_drag_nml
+    f_drag         = 'x'
+  , f_Cdn_atm      = 'x'
+  , f_Cdn_ocn      = 'd'
+/
+
diff --git a/input_templates/run_ice.Linux.ARSC.pacman b/input_templates/run_ice.Linux.ARSC.pacman
new file mode 100644
index 0000000..efb79e6
--- /dev/null
+++ b/input_templates/run_ice.Linux.ARSC.pacman
@@ -0,0 +1,46 @@
+#!/bin/bash
+# ------------ ARSC : pacman ------------
+#PBS -N CICE
+#PBS -l walltime=00:30:00
+#PBS -l nodes=1:ppn=16
+#PBS -q debug
+###PBS -l nodes=1:ppn=16
+###PBS -q standard_16
+###PBS -l nodes=1:ppn=12
+###PBS -q standard_12
+###PBS -l nodes=1:ppn=32
+###PBS -q bigmem
+#PBS -W group_list=akwaters
+#PBS -j oe
+
+cd $PBS_O_WORKDIR
+module load PrgEnv-pgi/11.2
+module list
+
+export ARCH=`uname -s`                           # architecture
+set  stamp   = `date -u '+%y%m%d%H%M%S'`
+export ICE_LOG_FILE=ice.log.${stamp}
+
+
+exit 0
+
+#
+#  Prolog
+#
+echo " "
+echo "++++ Pacman ++++ $PGM_NAME began:    `date`"
+echo "++++ Pacman ++++ $PGM_NAME hostname: `hostname`"
+echo "++++ Pacman ++++ $PGM_NAME uname -a: `uname -a`"
+echo " "
+TBEGIN=`echo "print time();" | perl`
+
+mpirun ./cice >&! $ICE_LOG_FILE
+
+#
+#  Epilog
+#
+TEND=`echo "print time();" | perl`
+echo " "
+echo "++++ Pacman ++++ $PGM_NAME pwd:      `pwd`"
+echo "++++ Pacman ++++ $PGM_NAME ended:    `date`"
+echo "++++ Pacman ++++ $PGM_NAME walltime: `expr $TEND - $TBEGIN` seconds"
diff --git a/io_netcdf/ice_history_write.F90 b/io_netcdf/ice_history_write.F90
index 4d092d8..3869bfb 100644
--- a/io_netcdf/ice_history_write.F90
+++ b/io_netcdf/ice_history_write.F90
@@ -128,8 +128,12 @@
 
         ! create file
         status = nf90_create(ncfile(ns), nf90_clobber, ncid)
-        if (status /= nf90_noerr) call abort_ice( &
+        if (status /= nf90_noerr) then
+           print *, 'trouble from nf90_create'
+           print *, nf90_strerror(status)
+           call abort_ice( &
            'ice: Error creating history ncfile '//ncfile(ns))
+        endif
 
       !-----------------------------------------------------------------
       ! define dimensions
diff --git a/io_netcdf/ice_restart.F90 b/io_netcdf/ice_restart.F90
index 349101e..144c383 100644
--- a/io_netcdf/ice_restart.F90
+++ b/io_netcdf/ice_restart.F90
@@ -165,8 +165,12 @@
          iflag = 0
          if (lcdf64) iflag = nf90_64bit_offset
          status = nf90_create(trim(filename), iflag, ncid)
-         if (status /= nf90_noerr) call abort_ice( &
+         if (status /= nf90_noerr) then
+            print *, 'trouble from nf90_create'
+            print *, nf90_strerror(status)
+            call abort_ice( &
             'ice: Error creating restart ncfile '//trim(filename))
+         endif
 
          status = nf90_put_att(ncid,nf90_global,'istep1',istep1)
          status = nf90_put_att(ncid,nf90_global,'time',time)
diff --git a/mpi/ice_communicate.F90 b/mpi/ice_communicate.F90
index 75d8e0c..315a097 100644
--- a/mpi/ice_communicate.F90
+++ b/mpi/ice_communicate.F90
@@ -84,7 +84,7 @@
    call cpl_interface_init(cpl_fields_icename, MPI_COMM_ICE)
 #else
 
-#if (defined popcice || defined CICE_IN_NEMO)
+#if (defined popcice || defined CICE_IN_NEMO || defined CICE_IN_ROMS)
    ! MPI_INIT is called elsewhere in coupled configuration
 #else
    call MPI_INIT(ierr)
diff --git a/serial/ice_communicate.F90 b/serial/ice_communicate.F90
index b7633a2..aeef8b0 100644
--- a/serial/ice_communicate.F90
+++ b/serial/ice_communicate.F90
@@ -46,6 +46,7 @@
    include 'mpif.h'   ! MPI Fortran include file
 
    integer (int_kind) :: ierr  ! MPI error flag
+   integer (int_kind) :: ice_comm
 #endif
 
 !-----------------------------------------------------------------------
@@ -55,7 +56,11 @@
 !
 !-----------------------------------------------------------------------
 
-#ifdef coupled
+#if defined CICE_IN_ROMS
+   ice_comm = MPI_COMM_WORLD  ! Global communicator
+   call MPI_COMM_DUP(ice_comm, MPI_COMM_ICE, ierr)
+   call MPI_COMM_RANK  (MPI_COMM_ICE, my_task, ierr)
+#elif defined coupled
    call MPI_INIT(ierr)
    call MPI_COMM_RANK  (MPI_COMM_ICE, my_task, ierr)
 #else
diff --git a/source/ice_grid.F90 b/source/ice_grid.F90
index e423cd3..fd6fb1c 100644
--- a/source/ice_grid.F90
+++ b/source/ice_grid.F90
@@ -267,6 +267,8 @@
          endif 
       elseif (trim(grid_type) == 'cpom_grid') then
          call cpomgrid          ! cpom model orca1 type grid
+      elseif (trim(grid_type) == 'roms_grid') then
+         call romsgrid_nc       ! roms model netcdf type grid
       else
          call rectgrid          ! regular rectangular grid
       endif
@@ -954,6 +956,151 @@
       end subroutine cpomgrid
 
 !=======================================================================
+!
+! !IROUTINE: romsgrid_nc - read and set ROMS grid and land mask
+!
+! !INTERFACE:
+!
+      subroutine romsgrid_nc
+!
+! !DESCRIPTION:
+!
+! Read Netcdf ROMS domain after going through python filter.
+!
+! !REVISION HISTORY:
+!
+! authors: Kate Hedstrom
+!
+! !USES:
+!
+      use ice_domain_size
+      use ice_constants, only: c1, c0, &
+              field_loc_center, field_loc_NEcorner, &
+              field_type_scalar, field_type_angle
+      use ice_read_write, only: ice_read_nc
+      use ice_gather_scatter, only: scatter_global
+!
+! !INPUT/OUTPUT PARAMETERS:
+!
+!EOP
+!
+!-----------------------------------------------------------------
+      !
+      ! PIPS rotated spherical grid and land mask
+      !      rec no.         field         units
+      !      -------         -----         -----
+      !   land mask
+      !         1             KMT
+      !   grid
+      !         2            ULAT         radians
+      !         3            ULON         radians
+      !         4             HTN           cm
+      !         5             HTE           cm
+      !         6             HUS           cm
+      !         7             HUW           cm
+      !         8            ANGLE        radians
+      !
+      ! NOTE: There is no separate kmt file.  Land mask is part of grid file.
+!-----------------------------------------------------------------
+
+      integer (kind=int_kind) :: &
+         i, j, iblk, fid_grid, &
+         ilo,ihi,jlo,jhi      ! beginning and end of physical domain
+
+      logical (kind=log_kind) :: diag
+
+      type (block) :: &
+         this_block           ! block information for current block
+
+      character (char_len) :: &
+         fieldname            ! field name in netCDF file
+
+      real (kind=dbl_kind), dimension(:,:), allocatable :: &
+         work_g1
+
+      real (kind=dbl_kind), dimension (nx_block,ny_block,max_blocks) :: &
+         work1
+
+      call ice_open_nc(grid_file,fid_grid)
+
+      diag = .true.       ! write diagnostic info
+
+      if (my_task == master_task) &
+           write (nu_diag,*) '** Reading roms grid **'
+
+!-----------------------------------------------------------------
+      ! topography
+!-----------------------------------------------------------------
+
+      fieldname='kmt'
+      call ice_read_nc(fid_grid,1,fieldname,work1,diag, &
+                       field_loc=field_loc_center, &
+                       field_type=field_type_scalar)
+
+      hm(:,:,:) = c0
+      do iblk = 1, nblocks
+         this_block = get_block(blocks_ice(iblk),iblk)
+         ilo = this_block%ilo
+         ihi = this_block%ihi
+         jlo = this_block%jlo
+         jhi = this_block%jhi
+
+         do j = jlo, jhi
+         do i = ilo, ihi
+            hm(i,j,iblk) = work1(i,j,iblk)
+            if (hm(i,j,iblk) >= c1) hm(i,j,iblk) = c1
+         enddo
+         enddo
+      enddo                     ! iblk
+
+!-----------------------------------------------------------------
+      ! lat, lon, angle
+!-----------------------------------------------------------------
+
+      allocate(work_g1(nx_global,ny_global))
+
+      fieldname='ulat'
+      call ice_read_global_nc(fid_grid,1,fieldname,work_g1,diag) ! ULAT
+      call gridbox_verts(work_g1,latt_bounds)
+      call scatter_global(ULAT, work_g1, master_task, distrb_info, &
+                          field_loc_NEcorner, field_type_scalar)
+      call ice_HaloExtrapolate(ULAT, distrb_info, &
+                               ew_boundary_type, ns_boundary_type)
+
+      fieldname='ulon'
+      call ice_read_global_nc(fid_grid,1,fieldname,work_g1,diag) ! ULON
+      call gridbox_verts(work_g1,lont_bounds)
+      call scatter_global(ULON, work_g1, master_task, distrb_info, &
+                          field_loc_NEcorner, field_type_scalar)
+      call ice_HaloExtrapolate(ULON, distrb_info, &
+                               ew_boundary_type, ns_boundary_type)
+
+      fieldname='angle'
+      call ice_read_global_nc(fid_grid,1,fieldname,work_g1,diag) !  ANGLE
+      call scatter_global(ANGLE, work_g1, master_task, distrb_info, &
+                          field_loc_NEcorner, field_type_angle)
+
+!-----------------------------------------------------------------
+      ! cell dimensions
+      ! calculate derived quantities from global arrays to preserve
+      ! information on boundaries
+!-----------------------------------------------------------------
+
+      fieldname='htn'
+      call ice_read_global_nc(fid_grid,1,fieldname,work_g1,diag) ! HTN
+      call primary_grid_lengths_HTN(work_g1)                  ! dxu, dxt
+
+      fieldname='hte'
+      call ice_read_global_nc(fid_grid,1,fieldname,work_g1,diag) ! HTE
+      call primary_grid_lengths_HTE(work_g1)                  ! dyu, dyt
+
+      deallocate(work_g1)
+
+      if (my_task == master_task) call ice_close_nc(fid_grid)
+
+      end subroutine romsgrid_nc
+
+!=======================================================================
 
 ! Calculate dxu and dxt from HTN on the global grid, to preserve
 ! ghost cell and/or land values that might otherwise be lost. Scatter
diff --git a/source/ice_init.F90 b/source/ice_init.F90
index c06a7cb..00c354b 100644
--- a/source/ice_init.F90
+++ b/source/ice_init.F90
@@ -966,6 +966,7 @@
              grid_type  /=  'column'         .and. &
              grid_type  /=  'rectangular'    .and. &
              grid_type  /=  'cpom_grid'      .and. &
+             grid_type  /=  'roms_grid'      .and. &
              grid_type  /=  'latlon' ) then 
             call abort_ice('ice_init: unknown grid_type')
          endif
@@ -1188,7 +1189,7 @@
                                 aicen,    trcrn, &
                                 vicen,    vsnon)
 
-      use ice_constants, only: c0, c1, c2, c3, p2, p5, rhoi, rhos, Lfresh, &
+      use ice_constants, only: c0, c1, c2, c3, p2, p4, p5, rhoi, rhos, Lfresh, &
            cp_ice, cp_ocn, Tsmelt, Tffresh, rad_to_deg, puny
       use ice_domain_size, only: nilyr, nslyr, nx_global, ny_global, max_ntrcr, ncat
       use ice_state, only: nt_Tsfc, nt_qice, nt_qsno, nt_sice, nt_fbri, tr_brine
@@ -1261,7 +1262,7 @@
 
       real (kind=dbl_kind), parameter :: &
          hsno_init = 0.20_dbl_kind   , & ! initial snow thickness (m)
-         edge_init_nh =  70._dbl_kind, & ! initial ice edge, N.Hem. (deg) 
+         edge_init_nh =  70._dbl_kind, & ! initial ice edge, N.Hem. (deg)
          edge_init_sh = -60._dbl_kind    ! initial ice edge, S.Hem. (deg)
 
       indxi(:) = 0
@@ -1362,7 +1363,7 @@
          do i = ilo, ihi
             if (tmask(i,j)) then
                ! place ice in high latitudes where ocean sfc is cold
-               if ( (sst (i,j) <= Tf(i,j)+p2) .and. &
+               if ( (sst (i,j) <= Tf(i,j)+p4) .and. &
                     (ULAT(i,j) < edge_init_sh/rad_to_deg .or. &
                      ULAT(i,j) > edge_init_nh/rad_to_deg) ) then
                   icells = icells + 1
diff --git a/source/ice_read_write.F90 b/source/ice_read_write.F90
index 6bff9b8..4725c15 100644
--- a/source/ice_read_write.F90
+++ b/source/ice_read_write.F90
@@ -1226,7 +1226,7 @@
       if (my_task == master_task) then
          allocate(work_g1(nx,ny,ncat))
       else
-         allocate(work_g1(1,1,1))   ! to save memory
+         allocate(work_g1(1,1,ncat))   ! to save memory
       endif
 
       if (my_task == master_task) then
@@ -1674,7 +1674,7 @@
       if (my_task == master_task) then
          allocate(work_g1(nx,ny,ncat))
       else
-         allocate(work_g1(1,1,1))   ! to save memory
+         allocate(work_g1(1,1,ncat))   ! to save memory
       endif
 
       if (present(restart_ext)) then
